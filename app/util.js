// Generated by CoffeeScript 1.6.3
var async, fs, lower, merge, mongoose, path, punct, shallow, small, union, upper, visitFolder, watchFile, watchFolder,
  __hasProp = {}.hasOwnProperty;

fs = require('fs');

path = require('path');

mongoose = require('mongoose');

async = require('async');

shallow = function(a) {
  return merge({}, a);
};

merge = function(a, b) {
  var key, val;
  for (key in b) {
    if (!__hasProp.call(b, key)) continue;
    val = b[key];
    a[key] = val;
  }
  return a;
};

union = function(a, b) {
  return merge(shallow(a), b);
};

exports.shallow = shallow;

exports.merge = merge;

exports.union = union;

exports.is_string = function(obj) {
  return toString.call(obj) === '[object String]';
};

exports.is_null_or_empty = function(str) {
  return str === void 0 || str === null || !exports.is_string(str) || str.length === 0;
};

exports.to_boolean = function(obj) {
  if (obj === void 0 || obj === null || obj === false || obj === "false" || obj === "0" || obj === 0) {
    return false;
  }
  return true;
};

exports.document_id = function(a) {
  if (!a) {
    return null;
  }
  if (a.constructor.name === 'ObjectID') {
    return a;
  }
  if (a.constructor.name === 'String') {
    return mongoose.Types.ObjectId.fromString(a);
  }
  return a._id;
};

exports.compare_document = function(a, b) {
  if (!((a != null) && (b != null))) {
    return (a === b && b === null);
  }
  return exports.document_id(a).equals(exports.document_id(b));
};

lower = function(word) {
  return word.toLowerCase();
};

upper = function(word) {
  return word.substr(0, 1).toUpperCase() + word.substr(1);
};

small = "(a|an|and|as|at|but|by|en|for|if|in|of|on|or|the|to|v[.]?|via|vs[.]?)";

punct = "([!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]*)";

exports.title = function(a) {
  var index, m, parts, split;
  parts = [];
  split = /[_:.;?!] |(?: |^)["Ò]/g;
  index = 0;
  while (true) {
    m = split.exec(a);
    parts.push(a.substring(index, m ? m.index : a.length).replace(/\b([A-Za-z][a-z.'Õ]*)\b/g, function(all) {
      if (/[A-Za-z]\.[A-Za-z]/.test(all)) {
        return all;
      } else {
        return upper(all);
      }
    }).replace(RegExp("\\b" + small + "\\b", "ig"), lower).replace(RegExp("^" + punct + small + "\\b", "ig"), function(all, punct, word) {
      return punct + upper(word);
    }).replace(RegExp("\\b" + small + punct + "$", "ig"), upper));
    index = split.lastIndex;
    if (m) {
      parts.push(m[0]);
    } else {
      break;
    }
  }
  return parts.join('').replace(/\sV(s?)/ig, " v$1. ").replace(/(['Õ])S\b/ig, "$1s").replace(/\b(AT&T|Q&A)\b/ig, function(all) {
    return all.toUpperCase();
  });
};

exports.lower = lower;

exports.upper = upper;

exports.slug = function(a) {
  return a.replace(/^\s+|\s+$/g, '').toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-');
};

visitFolder = exports.visitFolder = function(folder, filter, visitor, next) {
  var stack;
  stack = [folder];
  return async.whilst(function() {
    return stack.length > 0;
  }, function(next) {
    var i;
    i = stack.pop();
    return fs.stat(i, function(err, s) {
      if (err) {
        return next(err);
      }
      if (!filter(i, s)) {
        return next();
      }
      if (!s.isDirectory()) {
        return visitor(i, s, next);
      }
      return fs.readdir(i, function(err, files) {
        var f, _i, _len;
        if (err) {
          return next(err);
        }
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          f = files[_i];
          if (f[0] !== '.') {
            stack.push(path.join(i, f));
          }
        }
        return next();
      });
    });
  }, next || (function() {}));
};

watchFile = exports.watchFile = function(i, changed, next) {
  return fs.stat(i, function(err, s) {
    var mtime, watch;
    if (err) {
      return next(err);
    }
    mtime = s.mtime.getTime();
    watch = fs.watch(i, function() {
      var mtime2;
      if (!fs.existsSync(i)) {
        watch.close();
        return changed('deleted', i);
      }
      mtime2 = fs.statSync(i).mtime.getTime();
      if (mtime2 > mtime) {
        mtime = mtime2;
        return changed('changed', i);
      }
    });
    if (next) {
      return next();
    }
  });
};

watchFolder = exports.watchFolder = function(folder, filter, changed, next) {
  return visitFolder(folder, filter, (function(i, s, next) {
    return watchFile(i, changed, next);
  }), next);
};
